pipeline {
    agent any

    environment {
        // Python virtual environment path
        VENV = "${WORKSPACE}/venv"
        // Docker Hub credentials and image info
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = "abellb/messaging-app"
        DOCKER_TAG = "latest"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub with credentials
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/yourusername/alx-backend-python.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    python3 -m venv ${VENV}
                    . ${VENV}/bin/activate
                    pip3 install -r messaging_app/requirements.txt
                    pip3 install pytest pytest-cov
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    . ${VENV}/bin/activate
                    cd messaging_app
                    pytest --junitxml=test-results/junit.xml --cov=. --cov-report=xml
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd messaging_app
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                '''
            }
        }

        stage('Login to Docker Hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
            }
        }
    }

    post {
        always {
            // Publish test results
            junit 'messaging_app/test-results/junit.xml'
            
            // Publish coverage report
            cobertura coberturaReportFile: 'messaging_app/coverage.xml'
            
            // Clean up virtual environment
            sh 'rm -rf ${VENV}'
            
            // Logout from Docker Hub
            sh 'docker logout'
        }
    }
} 